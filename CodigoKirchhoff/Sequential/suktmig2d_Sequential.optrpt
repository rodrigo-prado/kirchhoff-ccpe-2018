Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options: -I/home/rprado/cwp/include -g -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE -DCWP_LITTLE_ENDIAN -DSUXDR -D_BSD_SOURCE -D_POSIX_SOURCE -O3 -L/home/rprado/cwp/lib -lsu -lpar -lcwp -lm -xcore-avx2 -qopt-report-phase=vec -qopt-report=5 -prec-div -no-fma -o suktmig2d_Sequential

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at suktmig2d_Sequential.c(181,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at suktmig2d_Sequential.c(181,2)
   remark #15389: vectorization support: reference fc[i] has unaligned access   [ suktmig2d_Sequential.c(182,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.171
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 34 
   remark #15477: vector cost: 4.750 
   remark #15478: estimated potential speedup: 5.700 
   remark #15486: divides: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at suktmig2d_Sequential.c(181,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference fc[i] has unaligned access   [ suktmig2d_Sequential.c(182,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.390
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at suktmig2d_Sequential.c(181,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at suktmig2d_Sequential.c(196,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at suktmig2d_Sequential.c(296,3)
   remark #15382: vectorization support: call to function efread(void *, size_t, size_t, FILE *) cannot be vectorized   [ suktmig2d_Sequential.c(297,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at suktmig2d_Sequential.c(378,2) inlined into suktmig2d_Sequential.c(303,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at suktmig2d_Sequential.c(388,3) inlined into suktmig2d_Sequential.c(303,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at suktmig2d_Sequential.c(388,3) inlined into suktmig2d_Sequential.c(303,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(388,3) inlined into suktmig2d_Sequential.c(303,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END

   LOOP BEGIN at suktmig2d_Sequential.c(392,3) inlined into suktmig2d_Sequential.c(303,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at suktmig2d_Sequential.c(565,2) inlined into suktmig2d_Sequential.c(303,3)
      <Peeled loop for vectorization, Distributed chunk1>
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(565,2) inlined into suktmig2d_Sequential.c(303,3)
      <Distributed chunk1>
         remark #15389: vectorization support: reference filter[i] has unaligned access   [ suktmig2d_Sequential.c(567,3) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 1.833
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 32 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 26.590 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(565,2) inlined into suktmig2d_Sequential.c(303,3)
      <Remainder loop for vectorization, Distributed chunk1>
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(565,2) inlined into suktmig2d_Sequential.c(303,3)
      <Distributed chunk2>
         remark #15389: vectorization support: reference filter[i] has unaligned access   [ suktmig2d_Sequential.c(573,4) ]
         remark #15389: vectorization support: reference filter[i] has unaligned access   [ suktmig2d_Sequential.c(573,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.049
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 401 
         remark #15477: vector cost: 86.750 
         remark #15478: estimated potential speedup: 4.610 
         remark #15482: vectorized math library calls: 1 
         remark #15487: type converts: 4 
         remark #15488: --- end vector cost summary ---

         LOOP BEGIN at suktmig2d_Sequential.c(570,3) inlined into suktmig2d_Sequential.c(303,3)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed OUTPUT dependence between filter[i] (573:4) and filter[i] (573:4)
            remark #15346: vector dependence: assumed OUTPUT dependence between filter[i] (573:4) and filter[i] (573:4)
            remark #15548: loop was vectorized along with the outer loop
         LOOP END
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(565,2) inlined into suktmig2d_Sequential.c(303,3)
      <Remainder loop for vectorization, Distributed chunk2>

         LOOP BEGIN at suktmig2d_Sequential.c(570,3) inlined into suktmig2d_Sequential.c(303,3)
            remark #25460: No loop optimizations reported
         LOOP END
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(398,4) inlined into suktmig2d_Sequential.c(303,3)
         remark #15382: vectorization support: call to function crmul(complex, float) cannot be vectorized   [ suktmig2d_Sequential.c(399,27) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(402,4) inlined into suktmig2d_Sequential.c(303,3)
         remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

         LOOP BEGIN at suktmig2d_Sequential.c(402,4) inlined into suktmig2d_Sequential.c(303,3)
         <Multiversioned v2>
            remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         LOOP END

         LOOP BEGIN at suktmig2d_Sequential.c(402,4) inlined into suktmig2d_Sequential.c(303,3)
         <Remainder, Multiversioned v2>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at suktmig2d_Sequential.c(408,3) inlined into suktmig2d_Sequential.c(303,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at suktmig2d_Sequential.c(419,4) inlined into suktmig2d_Sequential.c(303,3)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at suktmig2d_Sequential.c(451,6) inlined into suktmig2d_Sequential.c(303,3)
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at suktmig2d_Sequential.c(451,6) inlined into suktmig2d_Sequential.c(303,3)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            LOOP END

            LOOP BEGIN at suktmig2d_Sequential.c(451,6) inlined into suktmig2d_Sequential.c(303,3)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END

         LOOP BEGIN at suktmig2d_Sequential.c(457,6) inlined into suktmig2d_Sequential.c(303,3)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between datalo[k-?] (458:7) and lowpass[fplo][k] (459:7)
            remark #15346: vector dependence: assumed ANTI dependence between lowpass[fplo][k] (459:7) and datalo[k-?] (458:7)
         LOOP END

         LOOP BEGIN at suktmig2d_Sequential.c(457,6) inlined into suktmig2d_Sequential.c(303,3)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(468,4) inlined into suktmig2d_Sequential.c(303,3)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at suktmig2d_Sequential.c(510,6) inlined into suktmig2d_Sequential.c(303,3)
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at suktmig2d_Sequential.c(510,6) inlined into suktmig2d_Sequential.c(303,3)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            LOOP END

            LOOP BEGIN at suktmig2d_Sequential.c(510,6) inlined into suktmig2d_Sequential.c(303,3)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END

         LOOP BEGIN at suktmig2d_Sequential.c(516,6) inlined into suktmig2d_Sequential.c(303,3)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between datalo[k-?] (517:7) and lowpass[fplo+1][k] (518:7)
            remark #15346: vector dependence: assumed ANTI dependence between lowpass[fplo+1][k] (518:7) and datalo[k-?] (517:7)
         LOOP END

         LOOP BEGIN at suktmig2d_Sequential.c(516,6) inlined into suktmig2d_Sequential.c(303,3)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at suktmig2d_Sequential.c(306,3)
   remark #15382: vectorization support: call to function efread(void *, size_t, size_t, FILE *) cannot be vectorized   [ suktmig2d_Sequential.c(307,4) ]
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ suktmig2d_Sequential.c(308,4) ]
   remark #15382: vectorization support: call to function fputtr(FILE *, segy *) cannot be vectorized   [ suktmig2d_Sequential.c(311,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at suktmig2d_Sequential.c(308,4)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at suktmig2d_Sequential.c(308,4)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(308,4)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at suktmig2d_Sequential.c(191,2)
   remark #15533: loop was not vectorized: loop exceeds complexity limits. Consider overriding limits (-override-limits) or using simd directive.
LOOP END
===========================================================================

Begin optimization report for: migkt2d(const float *const *, const int, const int, const float, const float, const float, const int, const float, const float, const float *, const int, const int, const int, const int, const float, const float *const *, float **, const int, const int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at suktmig2d_Sequential.c(378,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at suktmig2d_Sequential.c(388,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at suktmig2d_Sequential.c(388,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(388,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END

   LOOP BEGIN at suktmig2d_Sequential.c(392,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at suktmig2d_Sequential.c(565,2) inlined into suktmig2d_Sequential.c(395,4)
      <Peeled loop for vectorization, Distributed chunk1>
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(565,2) inlined into suktmig2d_Sequential.c(395,4)
      <Distributed chunk1>
         remark #15389: vectorization support: reference filter[i] has unaligned access   [ suktmig2d_Sequential.c(567,3) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 1.833
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 32 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 26.590 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(565,2) inlined into suktmig2d_Sequential.c(395,4)
      <Remainder loop for vectorization, Distributed chunk1>
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(565,2) inlined into suktmig2d_Sequential.c(395,4)
      <Distributed chunk2>
         remark #15389: vectorization support: reference filter[i] has unaligned access   [ suktmig2d_Sequential.c(573,4) ]
         remark #15389: vectorization support: reference filter[i] has unaligned access   [ suktmig2d_Sequential.c(573,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.049
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 401 
         remark #15477: vector cost: 86.750 
         remark #15478: estimated potential speedup: 4.610 
         remark #15482: vectorized math library calls: 1 
         remark #15487: type converts: 4 
         remark #15488: --- end vector cost summary ---

         LOOP BEGIN at suktmig2d_Sequential.c(570,3) inlined into suktmig2d_Sequential.c(395,4)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed OUTPUT dependence between filter[i] (573:4) and filter[i] (573:4)
            remark #15346: vector dependence: assumed OUTPUT dependence between filter[i] (573:4) and filter[i] (573:4)
            remark #15548: loop was vectorized along with the outer loop
         LOOP END
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(565,2) inlined into suktmig2d_Sequential.c(395,4)
      <Remainder loop for vectorization, Distributed chunk2>

         LOOP BEGIN at suktmig2d_Sequential.c(570,3) inlined into suktmig2d_Sequential.c(395,4)
            remark #25460: No loop optimizations reported
         LOOP END
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(398,4)
         remark #15382: vectorization support: call to function crmul(complex, float) cannot be vectorized   [ suktmig2d_Sequential.c(399,27) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(402,4)
         remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

         LOOP BEGIN at suktmig2d_Sequential.c(402,4)
         <Multiversioned v2>
            remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         LOOP END

         LOOP BEGIN at suktmig2d_Sequential.c(402,4)
         <Remainder, Multiversioned v2>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at suktmig2d_Sequential.c(408,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at suktmig2d_Sequential.c(419,4)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at suktmig2d_Sequential.c(451,6)
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at suktmig2d_Sequential.c(451,6)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            LOOP END

            LOOP BEGIN at suktmig2d_Sequential.c(451,6)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END

         LOOP BEGIN at suktmig2d_Sequential.c(457,6)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between datalo[k-?] (458:7) and lowpass[fplo][k] (459:7)
            remark #15346: vector dependence: assumed ANTI dependence between lowpass[fplo][k] (459:7) and datalo[k-?] (458:7)
         LOOP END

         LOOP BEGIN at suktmig2d_Sequential.c(457,6)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at suktmig2d_Sequential.c(468,4)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at suktmig2d_Sequential.c(510,6)
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at suktmig2d_Sequential.c(510,6)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            LOOP END

            LOOP BEGIN at suktmig2d_Sequential.c(510,6)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END

         LOOP BEGIN at suktmig2d_Sequential.c(516,6)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between datalo[k-?] (517:7) and lowpass[fplo+1][k] (518:7)
            remark #15346: vector dependence: assumed ANTI dependence between lowpass[fplo+1][k] (518:7) and datalo[k-?] (517:7)
         LOOP END

         LOOP BEGIN at suktmig2d_Sequential.c(516,6)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: lpfilt(int, int, float, float, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at suktmig2d_Sequential.c(565,2)
<Peeled loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at suktmig2d_Sequential.c(565,2)
<Distributed chunk1>
   remark #15389: vectorization support: reference filter[i] has unaligned access   [ suktmig2d_Sequential.c(567,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.833
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 26.590 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at suktmig2d_Sequential.c(565,2)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at suktmig2d_Sequential.c(565,2)
<Distributed chunk2>
   remark #15389: vectorization support: reference filter[i] has unaligned access   [ suktmig2d_Sequential.c(573,4) ]
   remark #15389: vectorization support: reference filter[i] has unaligned access   [ suktmig2d_Sequential.c(573,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.049
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 401 
   remark #15477: vector cost: 86.750 
   remark #15478: estimated potential speedup: 4.610 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at suktmig2d_Sequential.c(570,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between filter[i] (573:4) and filter[i] (573:4)
      remark #15346: vector dependence: assumed ANTI dependence between filter[i] (573:4) and filter[i] (573:4)
      remark #15548: loop was vectorized along with the outer loop
   LOOP END
LOOP END

LOOP BEGIN at suktmig2d_Sequential.c(565,2)
<Remainder loop for vectorization, Distributed chunk2>

   LOOP BEGIN at suktmig2d_Sequential.c(570,3)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: gravar_dados(float **, int, int, int, char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at suktmig2d_Sequential.c(584,2)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ suktmig2d_Sequential.c(586,3) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ suktmig2d_Sequential.c(588,4) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ suktmig2d_Sequential.c(590,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (586:3) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (590:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (590:3) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (586:3)

   LOOP BEGIN at suktmig2d_Sequential.c(587,3)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ suktmig2d_Sequential.c(588,4) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (588:4) and mig[ix] (588:4)
      remark #15346: vector dependence: assumed ANTI dependence between mig[ix] (588:4) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (588:4)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: gravar_velocidade(float **, int, int, int, char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at suktmig2d_Sequential.c(602,2)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ suktmig2d_Sequential.c(604,3) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ suktmig2d_Sequential.c(606,4) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ suktmig2d_Sequential.c(608,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (604:3) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (608:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (608:3) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (604:3)

   LOOP BEGIN at suktmig2d_Sequential.c(605,3)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ suktmig2d_Sequential.c(606,4) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (606:4) and vel[ix] (606:4)
      remark #15346: vector dependence: assumed ANTI dependence between vel[ix] (606:4) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (606:4)
   LOOP END
LOOP END
===========================================================================
